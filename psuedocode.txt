
/* 
gameBoard IIFE module:
CAPTION: holds details about the GameBoard and can provide information about its
state. 

MODULE RECEIVES nothing

PRIVATE grid GETS 3x3 array containing null  // null explicitly signals absence of value
SET winningConfigs TO ARRAY OF
    [*,*,*, , , , , , ], 
    [ , , ,*,*,*, , , ],
    [ , , , , , ,*,*,*],
    [*, , ,*, , ,*, , ],
    [ ,*, , ,*, , ,*, ],
    [ , ,*, , ,*, , ,*],
    [*, , , ,*, , , ,*],
    [ , ,*, ,*, ,*, , ]
PRIVATE CONSTANT MARKER_X gets 'x'
PRIVATE CONSTANT MARKER_O gets 'o'
PRIVATE CONSTANT TIE gets 'tie'
PRIVATE CONSTANT ONGOING gets 'ongoing;

PRIVATE winner GETS null;
PRIVATE numMarks GETS 0

PUBLIC FUNC isBlank RECEIVES indices i,j RETURNS if specified cell is null
PUBLIC FUNC placeMark RECEIVES indices i,j and marker DOES
    IF isBlank(i,j)  // a check happens here but the game controller should check as well
        PUT marker in grid[i][j] 
        INCREMENT numMarks
    ELSE
        THROW ERROR

    RETURNS nothing

// Returns one of: 'x', 'o', TIE or ONGOING
PUBLIC FUNC getGameState RECEIVES nothing DOES
    CALL getGameWinner and store result
    IF result non-null: RETURN the winning marker
    ELSE: CALL isTie and RETURN either TIE or ONGOING
    
PRIVATE FUNC getGameWinner RECEIVES nothing DOES
    CHECK if either marker has won by comparing against winningConfigs
    IF neither won, winner will be null
    RETURNS one of MARKER_X, MARKER_O, or null

PRIVATE FUNC isTie RECEIVES nothing DOES // a tie is defined as board filled and no winner
    IF (winner is null) AND (numMarks === 9) RETURN TRUE
    ELSE RETURN FALSE

PUBLIC FUNC resetBoard RECEIVES nothing DOES
    FOR EACH cell IN grid, PUT null
    SET numMarks to 0

RETURN as module:
    the public stuff
*/


/*
CreatePlayer factory function:
CAPTION:

RECEIVES: playerName, playerMarker

PRIVATE name = playerName;
PRIVATE marker = playerMaker

PUBLIC FUNC getName () {
    RETURNS name
}
PUBLIC FUNC getMarker () {
    RETURNS marker
}
// no setters since don't want these properties to be modified

// ? just an idea
PUBLIC FUNC requestMark(i, j) {

}

RETURN {
    the public stuff
}
*/


/*
GameControl IIFE module:
CAPTION: Logic responsible for allowing players to make a choice, calling GameBoard's methods. 
will print to console in the console version of the game. 
MODULE RECEIVES nothing (no dependencies)

PRIVATE let player1;
PRIVATE let player2;

// holds null, 1, or 2. null acts as a proxy for a game not being in session
PRIVATE let playerTurn = null; 

PRIVATE FUNC hasGameBegun ACCEPTS nothing
    RETURNS whether playerTurn IS NOT null

// called when pressing the [Start Game] button
PUBLIC FUNC createPlayers ACCEPTS name1, name2 RETURNS nothing
    CHECK if game is ongoing by CALLING hasGameBegun
        THROW error if so
    CHECK if player1 or player2 are already defined
        THROW error if so

    SET player1 & player2 BY CALLING createPlayer factory function

// called to start a new game once players are created (click [Begin!] on player creation screen)
PUBLIC FUNC playGame ACCEPTS nothing RETURNS nothing
    CHECK if players are created: if player1 or player2 are undefined
        THROW error if so
    CHECK if game IS ongoing by CALLING hasGameBegun
        THROW error if so
    
    RESET the gameBoard by CALLING gameBoard.resetBoard
    SET playerTurn TO 1

PUBLIC FUNC playTurn ACCEPTS coordinates i,j RETURNS the marker placed or error if unable to
    CHECK if game IS NOT ongoing by CALLING hasGameBegun
        THROW error if so
    check if coordinate is valid: in range? does it collide? (use Gameboard.isBlank(i,j))
        THROW error

    // place mark
    SET mark to x or o depending on playerTurn
    CALL Gameboard.placeMark(i,j,mark)

    // Check the gamestate and handle a conclusion if applicable
    CALL Gameboard.getGamestate()
    IF 'ongoing',
        SET playerTurn to either 1 or 2 (toggle)
    ELSE (game has concluded),         
        CALL showConclusion PASSING IN the conclusion
        CALL concludeGame

PRIVATE FUNC showConclusion ACCEPTS one of 'xWin', 'oWin', 'tie' (as defined by Gameboard) RETURNS nothing
    IF not a valid conclusion:
        THROW error

    LOG a message displaying the conclusion

PRIVATE FUNC concludeGame ACCEPTS nothing RETURNS nothing
    SET playerTurn TO null // disables playTurn from being called until playGame is called again
    (does not reset the player)
    (does not reset the grid)

*/